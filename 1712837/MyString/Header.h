#ifndef __HEADER_H__
#define __HEADER_H__
#include <iostream>
using namespace std;
#include<string>
class MyString
{
private:
	char*Chuoi;
	size_t DoDai;
public:
	MyString();
	MyString(const MyString&Data);
	MyString(const MyString&Data, size_t n);
	MyString(const MyString&Data, size_t ViTri, size_t n);
	MyString(const char*Data);
	MyString(size_t n, char c);
	~MyString();
	friend ostream& operator<<(ostream& os, MyString&Data);
	friend istream& operator>>(istream& is, MyString&Data);
	MyString& operator=(const MyString&Data);
	MyString& operator=(const char*Data);
	MyString& operator=(char c);
	size_t size();
	size_t length();
	void resize(size_t n, char c);
	void resize(size_t n);
	size_t capacity();
	void reserve(size_t n);
	void clear();
	bool empty();
	void shrink_to_fit();
	char& operator[] (size_t pos);
	char& at(size_t pos);
	char& back();
	char& front();
	MyString& operator+= (const MyString&Data);
	MyString& operator+= (const char*Data);
	MyString& operator+= (char c);
	MyString& append(const MyString&Data);
	MyString& append(const MyString&Data, size_t subpos, size_t sublen);
	MyString& append(const char*Data);
	MyString& append(const char*Data, size_t n);
	MyString& append(size_t n, char c);
	void push_back(char c);
	MyString& assign(const MyString &Data);
	MyString& assign(const MyString &Data, size_t subpos, size_t sublen);
	MyString& assign(const char*Data);
	MyString& assign(const char*Data, size_t n);
	MyString& assign(size_t n, char c);
	MyString& insert(size_t pos, const MyString&Data);
	MyString& insert(size_t pos, const MyString&Data, size_t subpos, size_t sublen);
	MyString& insert(size_t pos, const char*Data);
	MyString& insert(size_t pos, const char*Data, size_t n);
	MyString& insert(size_t pos, size_t n, char c);
	MyString& erase(size_t pos, size_t len);
	MyString& replace(size_t pos, size_t len, const MyString&Data);
	MyString& replace(size_t pos, size_t len, const MyString&Data, size_t subpos, size_t sublen);
	MyString& replace(size_t pos, size_t len, const char*Data);
	MyString& replace(size_t pos, size_t len, const char*Data, size_t n);
	MyString& replace(size_t pos, size_t len, size_t n, char c);
	void swap(MyString &Data);
	void pop_back();
	const char* c_str() const noexcept;
	const char* data() const noexcept;
	size_t copy(char*Data, size_t len, size_t pos) const;
	size_t find(const MyString&Data, size_t pos) const noexcept;
	size_t find(const char*Data, size_t pos) const;
	size_t find(const char*Data, size_t pos, size_t n) const;
	size_t find(char c, size_t pos = 0) const noexcept;
	size_t rfind(const MyString&Data, size_t pos) const noexcept;
	size_t rfind(const char*Data, size_t pos) const;
	size_t rfind(const char*Data, size_t pos, size_t n) const;
	size_t rfind(char c, size_t pos) const noexcept;
	size_t find_first_of(const MyString&Data, size_t pos = 0) const noexcept;
	size_t find_first_of(const char*Data, size_t pos = 0) const;
	size_t find_first_of(const char*Data, size_t pos, size_t n) const;
	size_t find_first_of(char c, size_t pos = 0) const noexcept;
	size_t find_last_of(const MyString&Data, size_t pos) const noexcept;
	size_t find_last_of(const char*Data, size_t pos) const;
	size_t find_last_of(const char*Data, size_t pos, size_t n) const;
	size_t find_last_of(char c, size_t pos) const noexcept;
	size_t find_first_not_of(const MyString&Data, size_t pos = 0) const noexcept;
	size_t find_first_not_of(const char*Data, size_t pos = 0) const;
	size_t find_first_not_of(const char*Data, size_t pos, size_t n) const;
	size_t find_first_not_of(char c, size_t pos = 0) const noexcept;
	size_t find_last_not_of(const MyString&Data, size_t pos) const noexcept;
	size_t find_last_not_of(const char*Data, size_t pos) const;
	size_t find_last_not_of(const char*Data, size_t pos, size_t n) const;
	size_t find_last_not_of(char c, size_t pos) const noexcept;
	MyString substr(size_t pos, size_t len) const;
	int compare(const MyString&Data) const noexcept;
	int compare(size_t pos, size_t len, const MyString&Data) const;
	int compare(size_t pos, size_t len, const MyString&Data, size_t subpos, size_t sublen) const;
	int compare(const char*Data) const;
	int compare(size_t pos, size_t len, const char*Data) const;
	int compare(size_t pos, size_t len, const char*Data, size_t n) const;
	friend MyString& operator+(const MyString& L, const MyString& R);
	friend MyString operator+(const MyString & L, const char * R);
	friend MyString& operator+(const char* L, const MyString& R);
	friend MyString operator+(const MyString & L, char R);
	friend MyString& operator+(char L, const MyString& R);
	friend bool operator== (const MyString& L, const MyString& R);
	friend bool operator== (const char*   L, const MyString& R);
	friend 	bool operator== (const MyString& L, const char*   R);
	friend 	bool operator!= (const MyString& L, const MyString& R);
	friend 	bool operator!= (const char*   L, const MyString& R);
	friend bool operator!= (const MyString& L, const char*   R);
	friend 	bool operator<  (const MyString& L, const MyString& R);
	friend 	bool operator<  (const char*   L, const MyString& R);
	friend 	bool operator<  (const MyString& L, const char*   R);
	friend 	bool operator<= (const MyString& L, const MyString& R);
	friend 	bool operator<= (const char*   L, const MyString& R);
	friend 	bool operator<= (const MyString& L, const char*   R);
	friend 	bool operator>  (const MyString& L, const MyString& R);
	friend 	bool operator>  (const char*   L, const MyString& R);
	friend 	bool operator>  (const MyString& L, const char*   R);
	friend 	bool operator>= (const MyString& L, const MyString& R);
	friend 	bool operator>= (const char*   L, const MyString& R);
	friend 	bool operator>= (const MyString& L, const char*   R);
	friend void swap(MyString &x, MyString &y);
	friend istream& getline(istream&  is, MyString& Data, char delim);
	friend istream& getline(istream&  is, MyString& Data);
}
#endif

